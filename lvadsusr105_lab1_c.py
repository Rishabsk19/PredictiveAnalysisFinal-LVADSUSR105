# -*- coding: utf-8 -*-
"""LVADSUSR105_lab1_C.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GymnWnRUe0984m19xz-Aijxp3H_VMIeD
"""

#classification
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score,confusion_matrix,f1_score,classification_report
import matplotlib.pyplot as plt
import seaborn as sns

data  = pd.read_csv("/content/drive/MyDrive/loan_approval.csv")
df = pd.DataFrame(data)
df.info()
df.head()

ncount  = df.isnull().sum()
print(ncount)

df.fillna(df.mean(),inplace=True)


dcount=df.duplicated().sum()
df.drop_duplicates()

plt.figure(figsize=(10,7))
sns.boxplot(data=df)
plt.show()

q1  = df.quantile(0.25)
q3  = df.quantile(0.75)
iqr = q3-q1
outlier = ((df<q1-iqr*1.5 )| (df>q3+iqr*1.5)).any(axis=1)

ndf = df[~outlier]
plt.figure(figsize=(10,7))
sns.boxplot(data=ndf)
plt.show()

print(df)

encode = LabelEncoder()
ndf[" education"] = encode.fit_transform(ndf[" education"])
ndf[" loan_status"] = encode.fit_transform(ndf[" loan_status"])
ndf[" self_employed"] = encode.fit_transform(ndf[" self_employed"])
ndf

sns.pairplot(data=ndf)
plt.show()

x = ndf.drop([" loan_status"],axis=1)
y = ndf[" loan_status"]

std = StandardScaler()
x_std = std.fit_transform(x)

x_train,x_test,y_train,y_test  = train_test_split(x_std,y,test_size=0.3,random_state=42)

model = RandomForestClassifier()
model.fit(x_train,y_train)

output  = model.predict(x_test)

accuracyscore  = accuracy_score(y_test,output)
print(accuracyscore)

accuracyscore  = accuracy_score(y_test,output)
precisionscore=precision_score(y_test,output,average="weighted")
recallscore=recall_score(y_test,output,average="weighted")
f1score=f1_score(y_test,output,average="weighted")
confusionmatrix=confusion_matrix(y_test,output)
class_report=classification_report(y_test,output)

print(accuracyscore)
print(precisionscore)
print(recallscore)
print(f1score)
print(confusionmatrix)
print(class_report)

sns.barplot([accuracyscore,precisionscore,recallscore,f1score])
plt.show()
plt.scatter(y_test,output)
plt.xlabel(["y_test"])
plt.ylabel(["output"])
plt.legend()
plt.show()